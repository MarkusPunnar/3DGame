#version 460 core

in vec3 position;
in vec2 textureCoords;
in vec3 normalCoords;

out vec2 passTextureCoords;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
out float visibility;

uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition;

const float density = 0.0035;
const float gradient = 5.0;

void main(void) {
    vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
    vec4 vectorFromCamera = viewMatrix * worldPosition;
    gl_Position = projectionMatrix * vectorFromCamera;
    passTextureCoords = textureCoords * 100.0;
    surfaceNormal = (transformationMatrix * vec4(normalCoords, 0.0)).xyz;
    toLightVector = lightPosition - worldPosition.xyz;
    toCameraVector = (inverse(viewMatrix) * vec4(0.0,0.0,0.0,1.0)).xyz - worldPosition.xyz;
    float distance = length(vectorFromCamera);
    visibility = exp(-pow(density * distance, gradient));
}